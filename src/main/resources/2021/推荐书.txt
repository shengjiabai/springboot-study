一、说明
我最早是在2015年应同事要求列过一份书单，那份单子后来被我用过好几次。这次在原版基础上花了一点时间修改，删掉过时的书，增加近年读过的几本，差不多改了1/3。

这次李晴老师请我为程序员荐书，要加一个说明，讲如下几件事：

1. 时代变迁，沧海桑田
历史学家吉本在他的《罗马帝国衰亡史》中写道：“我踏上罗马广场的废墟，走过每一块值得怀念的——罗慕洛站立过的、图利（西塞罗）演讲过的、凯撒倒下去的——地方，这些景象顷刻间都来到眼前。”身为历史爱好者，我读到这段话后，一时间心旌摇荡不能自已。

程序员如果有一点历史感，会感觉非常幸福。我们日常工作使用的语言和框架，努力学习掌握的知识经验，还有业界的各种流行风尚，都是活生生的、现在进行时的历史。IT行业短短几十年，却已经发生过不知多少堪称“改朝换代”之事。行业需要拥抱变化。比如我用了5年Mac电脑，今年换回Windows，比如十年前有本很火的书《浪潮之巅》，写得很好激励很多人，我也不得不把它从书单删掉因为有些内容已经过时。

在这样的背景下，程序员读书也好，查资料也好，一定要注意文字的“时代局限性”。在比较成熟的技术领域，十年前的文字，要么已经成为不会过时的经典，要么就几乎没有阅读价值。如果是新潮领域，即使两年前的文字，准确性都应该打个问号。

2. 知识的获取途径和如何选书
书籍出版是一个很慢的过程，再加上中文翻译就更慢了。所以大家要获取比较新的技术领域的知识经验，一般不能指望看书。互联网上的知识和资讯无穷无尽，基本能找到任何想要找的东西，现代社会的知识工作者，具备快速获取有效知识的能力是一项竞争力。

相比其他类型的媒介，书籍优势在于完整性体系性。一本书可以把一个问题讲清讲透。反过来，如果对一个领域只是感兴趣不需要深入研究，读一本该领域的通论性质的书，建立基本框架掌握基本方法即可，可以省出时间打打游戏刷刷剧什么的 ^_^

我的读书方法就是会花较多时间看对书的介绍和评述，精心选书。

顺便在这里推荐几个对程序员有帮助的学习资源：

最近几年的业界潮流之一是编程语言的复兴。Go、Rust、Julia这几门语言都广受推崇，大家可以学一下它们的教程和文档。
极客时间APP。我内心非常厌恶把知识拿来卖钱的行为，他家带头破坏程序员社区无私分享的气氛。但客观说上面很多课程物超所值。
阿里技术的公众号。
另外，大家不要用百度搜索，请使用必应。不要只搜中文，请试着使用必应国际版搜索英文资料，硬着头皮看进去。将会节省大把时间。

3. "Talk is cheap. Show me the code."
这句话是Linux之父的名言。动手实践是提升技术能力最可靠也是唯一最有效的途径。光靠看书百分百不能成为一个技术高手。

二、书单
再次声明，本文内容是我个人意见，充满主观性，并不具有任何权威性，仅供大家想读书却无目标时做一个参照。我虽然在技术的道路上付出心血汗水一路探索，骨子里却是个喜欢文史哲的文科生，选书也有明显的对“形而上”的偏好，肯定不适合每个人。

1。 必读经典
《人月神话》。http://book.douban.com/subject/2230248/
人有“格局”一说。只要是IT行业的从业者，必定能够从《人月神话》中汲取智慧，大大拓展自身的格局。作者布鲁克斯后来获得了图灵奖。无数人对这本书的评价都是“常读常新”。较薄。必读。
2。 程序员
《代码大全（第二版）》。http://book.douban.com/subject/1477390/

很早时候看的，很多内容都忘了，另一些已经成为我头脑中根深蒂固的观念。是一本给程序员正三观、构建对编程工作方方面面的基础看法的书。极厚。不难读。
《设计模式：可复用面向对象软件的基础》。http://book.douban.com/subject/1052241/

软件设计领域开创性的“银弹”之一。优秀程序员必读，否则你就是“外行”。“封装变化”是我记得的核心思想。这本书是纯粹面向程序员的，每个模式都配有代码例子，不过例子是C++和Smalltalk写的，对java程序员来说可能比较陌生，但也绝不是看不懂。较薄。中等难读。同一主题另有人推荐过《Head first 设计模式》，据说比较好读，但比原版设计模式书厚一倍。
《领域驱动设计：软件核心复杂性应对之道》。http://book.douban.com/subject/5344973/

我2011年读这本书，当时每天晚上下班后坚持在单位读完一章才回家。共十七章花了近一个月。它为我解开迷惑突破瓶颈，是专业方面对我帮助最大的书。“共同语言”、“柔性设计”、“突破”等概念眼下还记忆犹新。适合有一定经验的中高级程序员。中等厚度。不难读。
《计算机程序的构造和解释：原书第2版》。http://book.douban.com/subject/1148282/

大名鼎鼎的SICP。不得不说，相见恨晚呀。这部书较厚，若加上做习题可说极厚，出名地字字珠玑、难读难懂，语言又是极为小众的Lisp，但对立志于在程序员的技术道路上远行的人来说，个人觉得啃下这本书来不失为一条捷径。哪怕花一两年时间慢慢消磨，也一定会大有收获。
《面向模式的软件体系结构（卷1）》。http://book.douban.com/subject/1232017/

“面向模式的软件体系结构”这一系列的书在业界也很有名，缩写叫做POSA。我读的时候中文版翻译刚出两卷，其中卷1是概述性的总纲，讲模式系统和架构模式，卷2讲并发模式，现在已经出了卷5。卷1较薄，但是感觉翻译不好，当年啃得极端痛苦，读完时感觉像刑满释放一样…… 但其内容相当对得起如此宏大的书名，反正我至今感觉所有见过的软件系统就其结构／架构来说，都没有跑出过书中讲述的寥寥几种模式之外。
更新：这套书有了新译本，名字叫：《面向模式的软件架构》https://item.jd.com/11336688.html
《测试驱动开发》。http://book.douban.com/subject/1229924/

这书我说不上自己读过，但是在华为时全公司推行敏捷，书里的思想和内容被灌输了一遍又一遍。敏捷软件开发的推行可说已经是上个十年的事情，时至今日，没有养成写单元测试习惯的程序员已经相对落伍很多了。书很薄，推荐所有的程序员同学们阅读。
《重构：改善既有代码的设计》。http://book.douban.com/subject/1229923/

这书同样也是在华为时看过相关的浓缩ppt，虽买在手，却没有细看。但书中的思想也已是当前软件工业界的基础性共识。书不算薄，推荐同学们至少跳读一下，知道在实践层面如何改善代码的设计，并且充分了解当我们说到“重构”时，到底在说些什么。
《卓有成效的管理者》。https://item.jd.com/12581270.html

程序员是“知识工作者”，也就是“掌握和运用符号和概念，利用知识或信息工作的人”。每个知识工作者都是“管理者”，学习管理知识，是程序员的一门必修课。书很薄，字字珠玑。
《科学究竟是什么》。https://book.douban.com/subject/2987179/

这是一本科学哲学领域的教科书。我们程序员都是“工程师”，不是“科学家”，但工程脱胎于科学。科学精神是一个工程师最可宝贵的品质。那么到底什么是“科学精神”？它可能并不是想当然的那个模样。科学哲学也是哲学，很有意思，却不是特别好懂。
3。 Java语言
《Effective Java 中文版（第二版）》。http://book.douban.com/subject/3360807/

作者Joshua Bloch的大名标在JDK集合类的源码上。这本书连同下面一本，是Java程序员的必读书，不读它，很多东西就要被别人教，或者根本不懂。较薄。好读。（这本书的内容是基于JDK5和6的，目前Java11版本的语言相对当时变化有点大，所以从时效性上来说该书较欠缺。但就书籍而言我目前还没有发现很好的替代品。）
《Java并发编程实战》。http://book.douban.com/subject/10484692/

这本书在业界的地位也能从获得了缩写JCIP看出来。怎么说呢，作为Java程序员，大公司面试基本场场问到并发相关的问题，至少从这个层面上来说，此书可谓“面试宝典”。实际上通过作者对Java并发框架所做的深入浅出的介绍，可以让人对并发编程所要面对的本质问题以及解决方法心中有谱。书虽标明Java，我自己就曾运用从中学到的知识和方法，定位过C++代码的多线程bug，写过简单的Javascript的“锁”。Java程序员必读。（与上一本相似，此书也是基于JDK6的，而Java的后续版本对并发框架做过较大的修改，所以读完还要记得“尽信书不如无书”，程序员应当时时更新知识。）
4。 其他语言
《Effective C++：改善程序与设计的55个具体做法》。http://book.douban.com/subject/1842426/
此书号称：世界上有两种C++程序员，读过Effective C++的和没有读过的。若同学们有写过C++背景的，即使目前已经不用了，仍然可以回头去读这本书，因为程序的设计当中面对的大部分问题和考量都是有共性的。
5。 软件项目管理和软件工程
《梦断代码》。http://book.douban.com/subject/3142280/

这本书读起来有时令人感到痛苦和绝望，它是作者身临其境所参与的软件史上一个著名的失败项目的记录。托尔斯泰说“幸福的家庭总是相似的，不幸的家庭各有各的不幸”，但从软件工程方法论的角度来说，失败的项目多经历过相似的失败历程。书很感人，也给人深刻的教益。
《敏捷项目管理》。http://book.douban.com/subject/1396534/

作者海史密斯是著名的敏捷专家。读了这本书，可以理解为什么敏捷项目管理在当今时代能够获得广泛影响，甚至在技术革命影响深刻的行业赢得对传统项目管理方式的“胜利”。敏捷并不是一些刻板的教条实践，而是一类灵活的思考和办事方式的总称，其背后包含有全球各种技术领域顶尖项目管理专家们的智慧。
6。 系统架构
这一小节列几本近年我在读的书，不一定适合所有人的口味

《微服务设计》。https://book.douban.com/subject/26772677/

《大教堂与集市》。https://book.douban.com/subject/25881855/

计算机和互联网技术构成了现代社会的基础。我们可以很自豪地说，程序员改变了世界！这些改变为什么会发生，最重要的推动力来自于开源运动。《大教堂与集市》就是一本论述软件开源活动的书。很薄，好读。
《人有人的用处》。https://book.douban.com/subject/4928961/

这是一本讲控制论的书。人们从动物身上获得灵感，制造机器，许许多多的机器又被互相连接起来，接管人类社会的运作。今天，社会中的每个人，都在和机器共生。系统架构师，其实就是管理很多机器的人，要在人与机器的这个共生体当中，发挥“人的用处”。
《公共事务的治理之道》。https://book.douban.com/subject/10545403/

我应该算是国内相对来说接触“敏捷软件开发”比较早的，2009年在华为，我所在团队就遵循敏捷过程开发交付软件产品。一个自然的问题会冒出来，敏捷之后是什么？
软件系统的开发者是知识型工作者。管理协调技术研发工作的难点在于，一方面，知识型工作者受到的约束越多，他的生产效率就越低，另一方面，软件系统必然是集体创作出来的成果，如果开发者之间没有很好地协同，生产效率也会降低。——这个矛盾场景使我认识到，研发管理，尤其技术架构领域的研发管理，跟传统的层级式的企业管理相去甚远，工程师们更像是组成了一个社区，人们的行事方式可能更遵循公共事务管理领域的规律。
本书是诺奖得主的代表作品，我印象深刻的是里面提出的一个理解公共事务的很有意思的三层结构：
第一层叫做“宪法选择”，说白了就是人们通过一些方式来决定谁说了算。
第二层叫做“集体选择”，就是说了算的那些人制定了一些规则让大家遵守。
第三层叫做“个人选择”，就是社区里的每个人，会根据如果遵守规则，收益和成本如何，以及如果违反了规则，可能受什么惩罚，来决定怎么做。
《增长黑客》。https://item.jd.com/12267682.html

读这本书时，我在想，互联网的繁荣，归根结底，源于有这么一群人，以创新为业，在自由勤奋的氛围里，发明各种新鲜概念，做成很多了不起的新鲜事。这是本偏运营和产品的书。
《SRE：Google运维解密》。https://book.douban.com/subject/26875239/

架构师需要懂一点运维。回头看，不懂运维时做过的架构和设计，失之于软、缺乏稳定感和穿透力。同时，SRE不只是运维手册，还体现了在Google那种史诗级别的大规模线上服务部署的情况下，所要面对的本质复杂性表现为什么，如何应对。这本书较厚，文字通畅，比较好读。
7。 杂书
《艺术的故事》。http://book.douban.com/subject/3162991/
跟工作基本无关的书我在这里只写这一本。也难说它跟工作无关，因为编程能不能算成一种广义的“艺术”（Art）各有各的看法。不论伦敦圣保罗大教堂的平面图，还是梵高著名的作品《星夜》，我敢说艺术家构思它们时头脑中对“权衡取舍”的拿捏，与优秀的程序设计者所常要面临的境况有诸多相似之处。这书很贵很厚，但绝对物超所值。
坦率地讲，很多程序员可能整个职业生涯，都在写一些干瘪枯燥毫无品味，甚至错漏百出的代码，自己看了说不定也厌烦，没可能在技术道路上走很远。我在跟毕业不久的工程师做分享时，常常推荐先“正三观”，想把代码写好，先要知道好的东西长什么样，而偏偏在编程这个领域，好与坏的标准高度抽象、非常讲求实践，没写过十万行代码谈都没法谈。所以把这本西方艺术的通俗介绍列在这里，可以作为大家树立一个正确的高标准的借鉴。
三、结语
近些年我在面试时问过好多人这样一个问题，“什么样的程序员是一个好程序员”？基本所有人都对这个问题没有准备，所以我也听过各种各样的答案。

我认为，一名程序员，

优秀的标准是：用心。毕竟，“有志者事竟成”。

而如果再往上去追求卓越的顶峰，它的核心是：有创造力。卓越来自创新，创新需要想象力。而想象力的源泉，除去天赋，更多来自广泛的积累和用心的思考。

以上。祝愿大家每天都能享受学习和思考的快乐。也十分期待大家都把自己读过的好书分享出来。

赞2人赞了它
无标签编辑标签
评论
用户图标: jiangzhiguo
蒋志国 发表：
受益匪浅的计科类：

《现代操作系统》

《http》、《tcp》大部头替代品《图解http》《图解tcp》

《设计模式 head first》