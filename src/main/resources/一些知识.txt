-Xms512m  -Xmn512m  -Xmx1g  -XX:ReservedCodeCacheSize=240m  -XX:MaxMetaspaceSize=512m  -XX:+UseG1GC  -XX:SoftRefLRUPolicyMSPerMB=50  -ea  -Dsun.io.useCanonCaches=false  -Djava.net.preferIPv4Stack=true  -Djdk.http.auth.tunneling.disabledSchemes=""  -XX:+HeapDumpOnOutOfMemoryError  -XX:-OmitStackTraceInFastThrow
1 程序员需要看的好网站！
https://github.com/sdmg15/Best-websites-a-programmer-should-visit

2 中文博客站点推荐
https://github.com/timqian/chinese-independent-blogs

Java8 Map computeIfAbsent方法说明:
// java8之前。从map中根据key获取value操作可能会有下面的操作
Object key = map.get("key");
if (key == null) {
    key = new Object();
    map.put("key", key);
}

// java8之后。上面的操作可以简化为一行，若key对应的value为空，会将第二个参数的返回值存入并返回
Object key2 = map.computeIfAbsent("key", k -> new Object());



public class TestSupplier {
	private int age;
	
	TestSupplier(){
		System.out.println(age);
	}
	public static void main(String[] args) {
		//创建Supplier容器，声明为TestSupplier类型，此时并不会调用对象的构造方法，即不会创建对象
		Supplier<TestSupplier> sup= TestSupplier::new;
		System.out.println("--------");
		//调用get()方法，此时会调用对象的构造方法，即获得到真正对象
		sup.get();
		//每次get都会调用构造方法，即获取的对象不同
		sup.get();
	}
}
 
StringJoiner是JDK8为了方便构造限定分隔符，甚至于给定前缀和后缀，而提供的一个类，示例代码如下：

        StringJoiner sj = new StringJoiner(",","{","}");
        sj.add("first").add("second").add("third");
        System.out.println(sj.toString());
		
		   List<String> ids = ImmutableList.of("1", "2", "3");
        System.out.println(String.join(",", ids));

--spring.profiles.active=server1
https://mp.weixin.qq.com/s/3_HnVzGm16zU2zhk7BnwFw
https://www.larscheng.com/archives/page/7/
https://blog.csdn.net/zjcjava/article/details/88316190
https://juejin.im/post/5b55b842f265da0f9e589e79#comment


ctrl+H查看类图
ctrl+H查看类图
ctrl+H查看类图

eureka实现多个实例
1.配置host将同一个ip执行不用的域名
  127.0.0.1 server1
  127.0.0.1 server2
  127.0.0.1 server3
2.java -jar ad-eureka-1.0-SNAPSHOT.jar  --spring.profiles.active=server1
 java -jar ad-eureka-1.0-SNAPSHOT.jar  --spring.profiles.active=server2
 java -jar ad-eureka-1.0-SNAPSHOT.jar  --spring.profiles.active=server3
 
 @DependsOn("dataTable")//依赖bean  使某一bean优先加载
 
 3.RestControllerAdvice  Advice增强   对spring方法进行增强
   a.ResponseBodyAdvice 可以拦截所有的controller请求对其进行增强  相当于自定义拦截器吧
 
 4.mysql查看binlog是否开启：show variables like '%log_bin%'      值nos说明开启了
   -- Binlog 日志的格式  show variables like 'binlog_format'
  
   liunx启动mysql :  service mysqld start    进入命令行：mysql -u root -p
   
  5.CommandLineRunner 和ApplicationRunner（可以接受系统参数变量） spring加载之后执行的方法 类似于监听器 多个可以使用@Order(value = 1)指定优先级 
  
  
springCloud没发注解代表什么？
1.@EnableFeignClients 使用Feign    



6.https://tool.lu/   在线工具 很强大

7.https://start.spring.io/actuator/info  springCloud和springboot版本对应关系

8.dependencyManagement  和 dependencies区别?dependencyManagement父类项目申明了version 子项目中直接引用无需在写
  dependencyManagement强制申明版本 


9.开启热部署（compile 里面abcd都勾选）
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-devtools</artifactId>
		<scope>runtime</scope>
		<optional>true</optional>
	</dependency>
	<!-- 健康监控 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		
10. springboot多模块开发可以开启run dashboard ,view > Tool Windows > Run Dashboard 没有则可以在工程目录下找到.idea文件夹下的workspace.xml
	<component name="RunDashboard">
	<option name="configurationTypes">
	  <set>
	    <option value="SpringBootApplicationConfigurationType"/>
	  </set>
	</option>
	<option name="ruleStates">
	  <list>
	    <RuleState>
	      <option name="name" value="ConfigurationTypeDashboardGroupingRule"/>
	    </RuleState>
	    <RuleState>
	      <option name="name" value="StatusDashboardGroupingRule"/>
	    </RuleState>
	  </list>
	</option>
	</component>
11.https://www.springcloud.cc/ 中文网  https://www.springcloud.cc/spring-cloud-consul.html

12.Ribbon客户端负载均衡 @LoadBalanced//开启负载均衡默认使用的是轮询  还有其他的什么随机，重试等，使用其他的是需要在启动类加@RibbonClient(name = "CLOUD-PAYMENT-SERVICE", configuration = MySelfRule.class)

13.方法上加final不允许继承和扩展

13.feign客户端默认超时时间是1秒，超时就出现异常。配置文件需要
# 设置feign客户端超时时间(OpenFeign默认支持ribbon)
ribbon:
  # 指的是建立连接所用的时间,适用于网络状态正常的情况下,两端连接所用的时间
  ReadTimeout: 5000
  # 指的是建立连接后从服务器读取到可用资源所用的时间
  ConnectTimeout: 5000
14.openfeign提供了日志打印功能。 
  @Bean
    public Logger.Level feignLoggerLevel() {
        // 请求和响应的头信息,请求和响应的正文及元数据
        return Logger.Level.FULL;
    }

15.代理代码
 public static void withoutEnvHttpClient() throws IOException {
        HttpHost target = new HttpHost("bizapi.jd.com", 443, "https");
        HttpHost proxy = new HttpHost("proxy.beta.xydns.com", 443);
        RequestConfig config = RequestConfig.custom()
                .setProxy(proxy)
                .build();
        HttpGet httpget = new HttpGet("/api/message/get");
        httpget.setConfig(config);
        System.out.println("Executing request " + httpget.getRequestLine() + " to " + target + " via " + proxy);
  
        CloseableHttpClient httpclient = HttpClients.createDefault();
        CloseableHttpResponse response = httpclient.execute(target, httpget);
        System.out.println("----------------------------------------");
        System.out.println(response.getStatusLine());
        System.out.println(EntityUtils.toString(response.getEntity()));
    }
	
	
	
16.RPC原理理解？
 解：1. 怎么做到透明化远程服务调用？怎么封装通信细节才能让用户像以本地调用方式调用远程服务呢？对java来说就是使用代理！
      java代理有两种方式：1） jdk 动态代理；2）字节码生成。尽管字节码生成方式实现的代理更为强大和高效，但代码维护不易，大部分公司实现RPC框架时还是选择动态代理方式。
	 2.序列化 反序列化（网络传输使用2进制）
     3.	通信：　消息数据结构被序列化为二进制串后，下一步就要进行网络通信了。目前有两种常用IO通信模型：1）BIO；2）NIO。一般RPC框架需要支持这两种IO模型，
	    基于netty，现在很多RPC框架都直接基于netty这一IO通信框架，省力又省心，比如阿里巴巴的HSF、dubbo，Twitter的finagle等。
	 4.	服务发现：zk
	 关键点：通信协议和序列化
	
	
17.spring cloud 使用zuul(过时)、 gateway（新一代网关服务） 	 gateway使用了webflux中的reactor-netty响应式组件，底层使用netty通讯框架。


18.java程序启动参数 -D详解
解：-D是用来在启动一个java程序时设置系统属性值的。如果该值是一个字符串且包含空格，那么需要包在一对双引号中。-Dfoo="some string" SomeClass
    何为系统属性值呢？也就是在System类中通过getProperties()得到的一串系统属性。
     System.out.print(System.getProperty("dubbo.token"));
    JAVA -Ddubbo.token=666  TEST.JAR  
    
19.java -javaagent 参数  执行jar中的preMain方法  在jvm启动是执行高与main方法执行 
解：1.avaAgent 的使用有涉及到这么几个关键字：
      permain,Instrumentation,ClassFileTransformer,
  jar包中MAINIFEST.MF 中的 Premain-Class指定preMain报名
  2.对于在启动命令添加的-javaagent=xx.jar 如果有多个，加载顺序就是从前往后，且每一个-javaagent 都是独立的。
	
	另外的再说一种不去手动写MANIFREST.MF文件的方式，使用maven插件：
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
            <archive>
                <!--自动添加META-INF/MANIFEST.MF -->
                <manifest>
                    <addClasspath>true</addClasspath>
                </manifest>
                <manifestEntries>
                    <Premain-Class>com.rickiyang.learn.PreMainTraceAgent</Premain-Class>
                    <Agent-Class>com.rickiyang.learn.PreMainTraceAgent</Agent-Class>
                    <Can-Redefine-Classes>true</Can-Redefine-Classes>
                    <Can-Retransform-Classes>true</Can-Retransform-Classes>
                </manifestEntries>
            </archive>
        </configuration>
    </plugin>
    
20. mysql字符串函数 find_in_set(str1,str2) 函数是返回 str2 中 str1 所在的位置索引，str2必须以 "," 分割开。   

lists 存的数据是 1,2,3
  select * from user where find_in_set("2",lists);


 
	
reactor 	 [化工] 反应器；[核] 反应堆；起反应的人
Proactor  前摄器 主动器 前摄器模式 异步情况下
 涉及到事件分发器的两种模式称为：Reactor和Proactor。  Reactor模式是基于同步I/O的，而Proactor模式是和异步I/O相关的。 
 
 3 网关选型
 Zuul：
 
 使用的是阻塞式的 API，不支持长连接，比如 websockets。
 底层是servlet，Zuul处理的是http请求。
 没有提供异步支持，流控等均由hystrix支持。
 依赖包spring-cloud-starter-netflix-zuul。
 Gateway：
 
 底层依然是servlet，但使用了webflux，多嵌套了一层框架。
 依赖spring-boot-starter-webflux和/ spring-cloud-starter-gateway。
 提供了异步支持，提供了抽象负载均衡，提供了抽象流控，并默认实现了RedisRateLimiter。
 相同点：
 
 底层都是servlet。
 两者均是web网关，处理的是http请求。
 不同点：
 
      内部实现：
 　　gateway对比zuul多依赖了spring-webflux，在spring的支持下，功能更强大，内部实现了限流、负载均衡等，扩展性也更强，但同时也限制了仅适合于Spring Cloud套件
 　　zuul则可以扩展至其他微服务框架中，其内部没有实现限流、负载均衡等。
 
      是否支持异步
 　　zuul仅支持同步。
 　　gateway支持异步。理论上gateway则更适合于提高系统吞吐量（但不一定能有更好的性能），最终性能还需要通过严密的压测来决定
       框架设计的角度。
 　　gateway具有更好的扩展性，并且其已经发布了2.0.0的RELESE版本，稳定性也是非常好的。
 
       性能
 　　WebFlux 模块的名称是 spring-webflux，名称中的 Flux 来源于 Reactor 中的类 Flux。Spring webflux 有一个全新的非堵塞的函数式 Reactive Web 框架，可以用来构建异步的、非堵塞的、事件驱动的服务，在伸           缩 性方面表现非常好。使用非阻塞API。 Websockets得到支持，并且由于它与Spring紧密集成，所以将会是一个更好的 开发 体验。
 　   Zuul 1.x，是一个基于阻塞io的API Gateway。Zuul已经发布了Zuul 2.x，基于Netty，也是非阻塞的，支持长连接，但Spring Cloud暂时还没有整合计划。
 
 总结
 　　总的来说，在微服务架构，如果使用了Spring Cloud生态的基础组件，则Spring Cloud Gateway相比而言更加具备优势。
	
	
	
	本地项目启动采用JVM环境变量与springboot启动参数来设置，由于采用了Apollo配置中心，所有的配置全部放到Apollo中，当本地需要临时修改某些配置用于调试，请将env设置为local
    范例如下：
    JVM参数：
    -Denv=local // 这个是本地调试需要频繁修改配置的时候添加的，正常情况下不添加
    -Dapollo.cacheDir=env/dev // 将配置文件拉到本地开发目录下，请务必在.ignore文件中添加/env的忽略目录，不然文件会被提交，好处是当env设置为local的时候可以方便的修改我们的配置环境变量
    -Dfile.encoding=utf-8 // 文件编码，不做要求
    springboot参数：
    --spring.cloud.service-registry.auto-registration.enabled=false // 不注册服务
    --spring.zipkin.enabled=false // 这个是针对zipkin的，test环境的zipkin无人维护，不需要开启
    --spring.schedulerx2.enabled=false // 这个是针对schedulerX2的开关，置为false本地就不会注册到调度机器列表中